/* The following code was generated by JFlex 1.4.1 on 5/23/21 10:41 PM */

/*
 * 12/06/2005
 *
 * PythonTokenMaker.java - Token maker for the Python programming language.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * LICENSE file for details.
 */
//package org.fife.ui.rsyntaxtextarea.modes;
package popdig;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;


/**
 * Scanner for the Python programming language.
 *
 * @author Robert Futrell
 * @version 0.3
 */

public class TurtleTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LONG_STRING_2 = 2;
  public static final int LONG_STRING_1 = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\37\1\7\1\0\1\37\1\35\22\0\1\37\1\35\1\16"+
    "\1\36\1\0\2\35\1\15\1\52\1\52\1\35\1\32\1\35\1\4"+
    "\1\27\1\35\1\22\7\25\2\3\1\5\1\40\1\6\1\35\1\10"+
    "\1\35\1\34\4\26\1\31\1\45\3\2\1\33\1\2\1\21\1\2"+
    "\1\47\3\2\1\13\1\2\1\44\1\14\2\2\1\24\2\2\1\52"+
    "\1\17\1\52\1\35\1\2\1\0\1\1\3\26\1\30\1\42\2\2"+
    "\1\43\1\33\1\2\1\20\1\2\1\51\1\50\1\41\1\2\1\11"+
    "\1\46\1\2\1\12\2\2\1\23\2\2\4\35\u0d82\0\177\2\uf180\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\1\1\3\1\1\1\4\2\1"+
    "\2\5\1\3\1\6\1\1\1\7\1\10\1\11\3\1"+
    "\1\12\2\13\2\5\1\0\1\14\1\15\1\3\1\16"+
    "\1\15\1\16\1\0\1\17\1\0\2\5\1\0\2\5"+
    "\1\0\1\15\1\3\1\15\1\16\1\20\7\0\1\2"+
    "\1\16\1\0\1\5\1\21\1\22\1\3\1\0\1\16"+
    "\4\0\1\23\1\24\1\16\1\20\1\0\1\25\2\0"+
    "\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\254\0\327\0\u0102"+
    "\0\201\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\201\0\u02b0\0\u02db\0\u0306\0\201\0\u0331"+
    "\0\u035c\0\u0387\0\u03b2\0\254\0\u03dd\0\u0408\0\u0408\0\u0433"+
    "\0\u045e\0\u0408\0\u0102\0\u0102\0\u012d\0\u0489\0\u04b4\0\u04df"+
    "\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637"+
    "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u03dd"+
    "\0\u0764\0\u078f\0\201\0\201\0\201\0\u07ba\0\u07e5\0\201"+
    "\0\u0810\0\u083b\0\u0866\0\u0891\0\201\0\201\0\u08bc\0\u0810"+
    "\0\u08e7\0\254\0\u0912\0\u093d\0\u0637";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\2\4\1\10\1\11\1\4"+
    "\1\12\1\13\1\12\1\13\1\14\1\15\1\4\2\6"+
    "\1\16\2\6\1\7\1\6\1\17\2\6\1\4\1\6"+
    "\1\20\1\4\1\21\1\22\1\23\3\6\1\24\1\25"+
    "\1\6\1\26\2\6\1\27\15\30\1\31\35\30\16\32"+
    "\1\33\34\32\54\0\4\34\1\35\3\0\4\34\3\0"+
    "\7\34\1\0\2\34\1\0\1\34\5\0\11\34\1\0"+
    "\3\36\1\7\1\0\1\36\3\0\4\36\2\0\1\36"+
    "\2\37\1\7\2\36\1\7\1\36\1\40\2\41\1\0"+
    "\1\42\1\36\1\0\1\36\1\0\12\36\1\0\7\43"+
    "\1\0\1\44\42\43\1\0\4\34\1\35\3\0\4\34"+
    "\1\14\1\15\1\0\7\34\1\0\2\34\1\0\1\34"+
    "\5\0\11\34\2\0\4\34\1\35\3\0\1\45\1\34"+
    "\1\45\1\34\1\14\1\15\1\0\7\34\1\0\2\34"+
    "\1\0\1\34\5\0\11\34\1\0\7\46\1\0\5\46"+
    "\1\47\1\46\1\50\33\46\7\51\1\0\6\51\1\52"+
    "\1\53\33\51\3\36\1\54\1\0\1\36\3\0\4\36"+
    "\2\0\1\36\2\37\1\55\2\56\1\55\1\36\1\40"+
    "\2\41\1\0\1\42\1\36\1\0\1\36\1\0\12\36"+
    "\4\0\1\57\16\0\1\57\2\0\1\57\26\0\1\60"+
    "\1\61\6\0\4\61\3\0\2\61\1\0\2\61\1\0"+
    "\1\61\1\0\2\61\1\0\1\61\5\0\1\62\10\61"+
    "\1\0\7\21\1\0\43\21\37\0\1\22\14\0\4\34"+
    "\1\35\3\0\1\63\3\34\3\0\7\34\1\0\2\34"+
    "\1\0\1\34\5\0\11\34\2\0\1\64\3\34\1\35"+
    "\3\0\4\34\3\0\7\34\1\0\2\34\1\0\1\34"+
    "\5\0\11\34\2\0\4\34\1\35\3\0\4\34\3\0"+
    "\7\34\1\0\2\34\1\0\1\34\5\0\7\34\1\65"+
    "\1\34\1\0\15\30\1\0\35\30\15\0\1\66\35\0"+
    "\16\32\1\0\34\32\16\0\1\67\35\0\5\70\3\0"+
    "\4\70\3\0\7\70\1\0\2\70\1\0\1\70\5\0"+
    "\11\70\1\0\4\36\1\0\1\36\3\0\4\36\2\0"+
    "\13\36\1\0\2\36\1\0\1\36\1\0\12\36\1\0"+
    "\3\36\1\40\1\0\1\36\3\0\4\36\2\0\3\36"+
    "\1\40\2\36\1\40\2\36\2\41\1\0\1\42\1\36"+
    "\1\0\1\36\1\0\12\36\1\0\3\36\1\71\1\72"+
    "\1\36\3\0\4\36\2\0\3\36\1\71\2\36\1\71"+
    "\4\36\1\72\2\36\1\0\1\36\1\0\12\36\1\0"+
    "\7\46\1\0\5\46\1\73\1\46\1\50\33\46\15\0"+
    "\1\74\35\0\7\46\1\0\43\46\7\51\1\0\6\51"+
    "\1\73\1\53\33\51\16\0\1\75\34\0\7\51\1\0"+
    "\43\51\3\36\1\54\1\0\1\36\3\0\4\36\2\0"+
    "\3\36\1\54\2\36\1\54\1\36\1\40\2\41\1\0"+
    "\1\42\1\36\1\0\1\36\1\0\12\36\1\0\3\36"+
    "\1\54\1\0\1\36\3\0\4\36\2\0\1\36\2\37"+
    "\1\55\2\36\1\55\1\36\1\40\2\41\1\0\1\42"+
    "\1\36\1\0\1\36\1\0\12\36\1\0\1\36\1\76"+
    "\1\36\1\76\1\0\1\36\3\0\4\36\2\0\3\36"+
    "\1\76\2\36\2\76\1\36\2\76\1\0\2\36\1\0"+
    "\1\36\1\0\2\36\1\76\2\36\1\76\4\36\4\0"+
    "\1\57\16\0\1\57\2\0\1\57\2\0\2\77\1\0"+
    "\1\100\20\0\4\61\1\101\3\0\4\61\3\0\7\61"+
    "\1\0\2\61\1\0\1\61\5\0\11\61\2\0\4\61"+
    "\1\101\3\0\1\102\3\61\3\0\7\61\1\0\2\61"+
    "\1\0\1\61\5\0\11\61\2\0\4\34\1\35\3\0"+
    "\1\34\1\103\2\34\3\0\7\34\1\0\2\34\1\0"+
    "\1\34\5\0\11\34\2\0\4\34\1\35\3\0\4\34"+
    "\3\0\1\104\6\34\1\0\2\34\1\0\1\34\5\0"+
    "\11\34\2\0\4\34\1\35\3\0\4\34\3\0\7\34"+
    "\1\0\2\34\1\0\1\34\5\0\10\34\1\103\16\0"+
    "\1\105\53\0\1\106\34\0\3\36\1\71\1\0\1\36"+
    "\3\0\4\36\2\0\3\36\1\71\2\36\1\71\4\36"+
    "\1\0\1\42\1\36\1\0\1\36\1\0\12\36\4\0"+
    "\1\107\16\0\1\107\2\0\1\107\25\0\1\36\1\76"+
    "\1\36\1\76\1\0\1\36\3\0\4\36\2\0\1\36"+
    "\2\37\1\76\2\36\2\76\1\36\2\76\1\0\2\36"+
    "\1\0\1\36\1\0\2\36\1\76\2\36\1\76\4\36"+
    "\4\0\1\107\1\72\15\0\1\107\2\0\1\107\4\0"+
    "\1\72\21\0\5\110\3\0\4\110\3\0\7\110\1\0"+
    "\2\110\1\0\1\110\5\0\11\110\2\0\4\61\1\101"+
    "\3\0\4\61\3\0\7\61\1\0\1\111\1\61\1\0"+
    "\1\61\5\0\11\61\2\0\4\34\1\35\3\0\4\34"+
    "\3\0\7\34\1\0\1\112\1\34\1\0\1\34\5\0"+
    "\11\34\2\0\4\34\1\35\3\0\4\34\3\0\7\34"+
    "\1\0\2\34\1\0\1\34\5\0\5\34\1\103\3\34"+
    "\4\0\1\107\16\0\1\107\2\0\1\107\5\0\1\100"+
    "\20\0\4\61\1\101\3\0\4\61\3\0\7\61\1\0"+
    "\2\61\1\0\1\61\5\0\1\61\1\113\7\61\2\0"+
    "\4\61\1\101\3\0\4\61\3\0\7\61\1\0\2\61"+
    "\1\0\1\61\5\0\2\61\1\114\6\61\2\0\4\61"+
    "\1\101\3\0\4\61\3\0\3\61\1\115\3\61\1\0"+
    "\2\61\1\0\1\61\5\0\11\61\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2408];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\11\1\1\11\3\1\1\11"+
    "\4\1\1\0\6\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\5\1\7\0\2\1\1\0\3\11\1\1"+
    "\1\0\1\11\4\0\2\11\2\1\1\0\1\1\2\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[77];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public TurtleTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		idord++;
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}

	int idord = 0;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		idord = 0;

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = LONG_STRING_2;
				break;
			case Token.LITERAL_CHAR:
				state = LONG_STRING_1;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TurtleTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TurtleTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 160) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 22: 
          { addToken(Token.PREPROCESSOR);
          }
        case 23: break;
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 24: break;
        case 11: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 25: break;
        case 15: 
          { addToken(Token.MARKUP_TAG_NAME);
          }
        case 26: break;
        case 8: 
          { addToken(Token.WHITESPACE);
          }
        case 27: break;
        case 14: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 28: break;
        case 9: 
          { addToken(Token.RESERVED_WORD);
          }
        case 29: break;
        case 10: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        case 17: 
          { yybegin(LONG_STRING_1); addToken(Token.LITERAL_CHAR);
          }
        case 31: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 32: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 33: break;
        case 12: 
          { addToken(Token.DATA_TYPE);
          }
        case 34: break;
        case 21: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 35: break;
        case 16: 
          { addToken(Token.ANNOTATION);
          }
        case 36: break;
        case 5: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 37: break;
        case 6: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 38: break;
        case 7: 
          { addToken(Token.COMMENT_EOL);
          }
        case 39: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 40: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 41: break;
        case 20: 
          { yybegin(YYINITIAL); addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 42: break;
        case 18: 
          { yybegin(LONG_STRING_2); addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 43: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(Token.LITERAL_CHAR);
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 78: break;
            case LONG_STRING_2: {
              if (firstToken==null) {
										addToken(Token.LITERAL_STRING_DOUBLE_QUOTE); 
									}
									return firstToken;
            }
            case 79: break;
            case LONG_STRING_1: {
              if (firstToken==null) {
										addToken(Token.LITERAL_CHAR); 
									}
									return firstToken;
            }
            case 80: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
